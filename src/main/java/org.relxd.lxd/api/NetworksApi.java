/*
 * LXD
 * The services listed below are referred as .....
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relxd.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.relxd.lxd.api;

import org.relxd.lxd.ApiCallback;
import org.relxd.lxd.ApiClient;
import org.relxd.lxd.ApiException;
import org.relxd.lxd.ApiResponse;
import org.relxd.lxd.Configuration;
import org.relxd.lxd.Pair;
import org.relxd.lxd.ProgressRequestBody;
import org.relxd.lxd.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.relxd.lxd.model.BackgroundOperationResponse;
import org.relxd.lxd.model.CreateNetworksByNameRequest;
import org.relxd.lxd.model.CreateNetworksRequest;
import org.relxd.lxd.model.ErrorResponse;
import org.relxd.lxd.model.PatchNetworksByNameRequest;
import org.relxd.lxd.model.UpdateNetworksByNameRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NetworksApi {
    private ApiClient localVarApiClient;

    public NetworksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NetworksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deleteNetworksByName
     * @param name Name of the network (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworksByNameCall(String name, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/networks/{name}"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNetworksByNameValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteNetworksByName(Async)");
        }
        

        okhttp3.Call localVarCall = deleteNetworksByNameCall(name, _callback);
        return localVarCall;

    }

    /**
     * 
     * Remove a network
     * @param name Name of the network (required)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse deleteNetworksByName(String name) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = deleteNetworksByNameWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove a network
     * @param name Name of the network (required)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> deleteNetworksByNameWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = deleteNetworksByNameValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove a network
     * @param name Name of the network (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteNetworksByNameAsync(String name, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNetworksByNameValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworks
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of networks </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworksCall(Integer recursion, String filter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/networks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (recursion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursion", recursion));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworksValidateBeforeCall(Integer recursion, String filter, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getNetworksCall(recursion, filter, _callback);
        return localVarCall;

    }

    /**
     * 
     * List of networks
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of networks </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse getNetworks(Integer recursion, String filter) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = getNetworksWithHttpInfo(recursion, filter);
        return localVarResp.getData();
    }

    /**
     * 
     * List of networks
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of networks </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> getNetworksWithHttpInfo(Integer recursion, String filter) throws ApiException {
        okhttp3.Call localVarCall = getNetworksValidateBeforeCall(recursion, filter, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List of networks
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of networks </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworksAsync(Integer recursion, String filter, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworksValidateBeforeCall(recursion, filter, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworksByName
     * @param name Name of the network (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about a network </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworksByNameCall(String name, Integer recursion, String filter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/networks/{name}"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (recursion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursion", recursion));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworksByNameValidateBeforeCall(String name, Integer recursion, String filter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getNetworksByName(Async)");
        }
        

        okhttp3.Call localVarCall = getNetworksByNameCall(name, recursion, filter, _callback);
        return localVarCall;

    }

    /**
     * 
     * Information about a network
     * @param name Name of the network (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about a network </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse getNetworksByName(String name, Integer recursion, String filter) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = getNetworksByNameWithHttpInfo(name, recursion, filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Information about a network
     * @param name Name of the network (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about a network </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> getNetworksByNameWithHttpInfo(String name, Integer recursion, String filter) throws ApiException {
        okhttp3.Call localVarCall = getNetworksByNameValidateBeforeCall(name, recursion, filter, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Information about a network
     * @param name Name of the network (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about a network </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworksByNameAsync(String name, Integer recursion, String filter, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworksByNameValidateBeforeCall(name, recursion, filter, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getNetworksByNameState
     * @param name Name of the network (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Network state </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworksByNameStateCall(String name, Integer recursion, String filter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/networks/{name}/state"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (recursion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursion", recursion));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNetworksByNameStateValidateBeforeCall(String name, Integer recursion, String filter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getNetworksByNameState(Async)");
        }
        

        okhttp3.Call localVarCall = getNetworksByNameStateCall(name, recursion, filter, _callback);
        return localVarCall;

    }

    /**
     * 
     * Network state
     * @param name Name of the network (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Network state </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse getNetworksByNameState(String name, Integer recursion, String filter) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = getNetworksByNameStateWithHttpInfo(name, recursion, filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Network state
     * @param name Name of the network (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Network state </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> getNetworksByNameStateWithHttpInfo(String name, Integer recursion, String filter) throws ApiException {
        okhttp3.Call localVarCall = getNetworksByNameStateValidateBeforeCall(name, recursion, filter, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Network state
     * @param name Name of the network (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Network state </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getNetworksByNameStateAsync(String name, Integer recursion, String filter, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNetworksByNameStateValidateBeforeCall(name, recursion, filter, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchNetworksByName
     * @param name Name of the network (required)
     * @param body Update the network information (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchNetworksByNameCall(String name, PatchNetworksByNameRequest body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/1.0/networks/{name}"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchNetworksByNameValidateBeforeCall(String name, PatchNetworksByNameRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling patchNetworksByName(Async)");
        }
        

        okhttp3.Call localVarCall = patchNetworksByNameCall(name, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update the network information
     * @param name Name of the network (required)
     * @param body Update the network information (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse patchNetworksByName(String name, PatchNetworksByNameRequest body) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = patchNetworksByNameWithHttpInfo(name, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Update the network information
     * @param name Name of the network (required)
     * @param body Update the network information (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> patchNetworksByNameWithHttpInfo(String name, PatchNetworksByNameRequest body) throws ApiException {
        okhttp3.Call localVarCall = patchNetworksByNameValidateBeforeCall(name, body, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update the network information
     * @param name Name of the network (required)
     * @param body Update the network information (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchNetworksByNameAsync(String name, PatchNetworksByNameRequest body, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchNetworksByNameValidateBeforeCall(name, body, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postNetworks
     * @param body Define a new network (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postNetworksCall(CreateNetworksRequest body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/1.0/networks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postNetworksValidateBeforeCall(CreateNetworksRequest body, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = postNetworksCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Define a new network
     * @param body Define a new network (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse postNetworks(CreateNetworksRequest body) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = postNetworksWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * Define a new network
     * @param body Define a new network (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> postNetworksWithHttpInfo(CreateNetworksRequest body) throws ApiException {
        okhttp3.Call localVarCall = postNetworksValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Define a new network
     * @param body Define a new network (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postNetworksAsync(CreateNetworksRequest body, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postNetworksValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postNetworksByName
     * @param name Name of the network (required)
     * @param body Rename a network (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> A standard value return response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postNetworksByNameCall(String name, CreateNetworksByNameRequest body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/1.0/networks/{name}"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postNetworksByNameValidateBeforeCall(String name, CreateNetworksByNameRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postNetworksByName(Async)");
        }
        

        okhttp3.Call localVarCall = postNetworksByNameCall(name, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Rename a network
     * @param name Name of the network (required)
     * @param body Rename a network (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> A standard value return response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse postNetworksByName(String name, CreateNetworksByNameRequest body) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = postNetworksByNameWithHttpInfo(name, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Rename a network
     * @param name Name of the network (required)
     * @param body Rename a network (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> A standard value return response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> postNetworksByNameWithHttpInfo(String name, CreateNetworksByNameRequest body) throws ApiException {
        okhttp3.Call localVarCall = postNetworksByNameValidateBeforeCall(name, body, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Rename a network
     * @param name Name of the network (required)
     * @param body Rename a network (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> A standard value return response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postNetworksByNameAsync(String name, CreateNetworksByNameRequest body, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postNetworksByNameValidateBeforeCall(name, body, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putNetworksByName
     * @param name Name of the network (required)
     * @param body Replace the network information (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putNetworksByNameCall(String name, UpdateNetworksByNameRequest body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/1.0/networks/{name}"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putNetworksByNameValidateBeforeCall(String name, UpdateNetworksByNameRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putNetworksByName(Async)");
        }
        

        okhttp3.Call localVarCall = putNetworksByNameCall(name, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Replace the network information
     * @param name Name of the network (required)
     * @param body Replace the network information (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse putNetworksByName(String name, UpdateNetworksByNameRequest body) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = putNetworksByNameWithHttpInfo(name, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Replace the network information
     * @param name Name of the network (required)
     * @param body Replace the network information (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> putNetworksByNameWithHttpInfo(String name, UpdateNetworksByNameRequest body) throws ApiException {
        okhttp3.Call localVarCall = putNetworksByNameValidateBeforeCall(name, body, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Replace the network information
     * @param name Name of the network (required)
     * @param body Replace the network information (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putNetworksByNameAsync(String name, UpdateNetworksByNameRequest body, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putNetworksByNameValidateBeforeCall(name, body, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
