/*
 * LXD
 * The services listed below are referred as .....
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relxd.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.relxd.lxd.api;

import org.relxd.lxd.ApiCallback;
import org.relxd.lxd.ApiClient;
import org.relxd.lxd.ApiException;
import org.relxd.lxd.ApiResponse;
import org.relxd.lxd.Configuration;
import org.relxd.lxd.Pair;
import org.relxd.lxd.ProgressRequestBody;
import org.relxd.lxd.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.relxd.lxd.model.BackgroundOperationResponse;
import java.math.BigDecimal;
import org.relxd.lxd.model.ErrorResponse;
import org.relxd.lxd.model.UpdateClusterMembersByNameRequest;
import org.relxd.lxd.model.UpdateClusterRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ClusterApi {
    private ApiClient localVarApiClient;

    public ClusterApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ClusterApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deleteClusterMembersByName
     * @param name Members name (required)
     * @param force force (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteClusterMembersByNameCall(String name, BigDecimal force, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/cluster/members/{name}"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (force != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force", force));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteClusterMembersByNameValidateBeforeCall(String name, BigDecimal force, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteClusterMembersByName(Async)");
        }
        

        okhttp3.Call localVarCall = deleteClusterMembersByNameCall(name, force, _callback);
        return localVarCall;

    }

    /**
     * 
     * Remove a member of the cluster
     * @param name Members name (required)
     * @param force force (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse deleteClusterMembersByName(String name, BigDecimal force) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = deleteClusterMembersByNameWithHttpInfo(name, force);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove a member of the cluster
     * @param name Members name (required)
     * @param force force (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> deleteClusterMembersByNameWithHttpInfo(String name, BigDecimal force) throws ApiException {
        okhttp3.Call localVarCall = deleteClusterMembersByNameValidateBeforeCall(name, force, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove a member of the cluster
     * @param name Members name (required)
     * @param force force (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteClusterMembersByNameAsync(String name, BigDecimal force, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteClusterMembersByNameValidateBeforeCall(name, force, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCluster
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about a cluster (such as networks and storage pools) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClusterCall(Integer recursion, String filter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/cluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (recursion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursion", recursion));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClusterValidateBeforeCall(Integer recursion, String filter, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getClusterCall(recursion, filter, _callback);
        return localVarCall;

    }

    /**
     * 
     * Information about a cluster (such as networks and storage pools)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about a cluster (such as networks and storage pools) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse getCluster(Integer recursion, String filter) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = getClusterWithHttpInfo(recursion, filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Information about a cluster (such as networks and storage pools)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about a cluster (such as networks and storage pools) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> getClusterWithHttpInfo(Integer recursion, String filter) throws ApiException {
        okhttp3.Call localVarCall = getClusterValidateBeforeCall(recursion, filter, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Information about a cluster (such as networks and storage pools)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about a cluster (such as networks and storage pools) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClusterAsync(Integer recursion, String filter, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClusterValidateBeforeCall(recursion, filter, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getClusterMembers
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of LXD members in the cluster </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClusterMembersCall(Integer recursion, String filter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/cluster/members";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (recursion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursion", recursion));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClusterMembersValidateBeforeCall(Integer recursion, String filter, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getClusterMembersCall(recursion, filter, _callback);
        return localVarCall;

    }

    /**
     * 
     * List of LXD members in the cluster
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of LXD members in the cluster </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse getClusterMembers(Integer recursion, String filter) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = getClusterMembersWithHttpInfo(recursion, filter);
        return localVarResp.getData();
    }

    /**
     * 
     * List of LXD members in the cluster
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of LXD members in the cluster </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> getClusterMembersWithHttpInfo(Integer recursion, String filter) throws ApiException {
        okhttp3.Call localVarCall = getClusterMembersValidateBeforeCall(recursion, filter, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List of LXD members in the cluster
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of LXD members in the cluster </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClusterMembersAsync(Integer recursion, String filter, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClusterMembersValidateBeforeCall(recursion, filter, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getClusterMembersByName
     * @param name Members name (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve the member&#39;s information and status </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClusterMembersByNameCall(String name, Integer recursion, String filter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/cluster/members/{name}"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (recursion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursion", recursion));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getClusterMembersByNameValidateBeforeCall(String name, Integer recursion, String filter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getClusterMembersByName(Async)");
        }
        

        okhttp3.Call localVarCall = getClusterMembersByNameCall(name, recursion, filter, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieve the member&#39;s information and status
     * @param name Members name (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve the member&#39;s information and status </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse getClusterMembersByName(String name, Integer recursion, String filter) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = getClusterMembersByNameWithHttpInfo(name, recursion, filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve the member&#39;s information and status
     * @param name Members name (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve the member&#39;s information and status </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> getClusterMembersByNameWithHttpInfo(String name, Integer recursion, String filter) throws ApiException {
        okhttp3.Call localVarCall = getClusterMembersByNameValidateBeforeCall(name, recursion, filter, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the member&#39;s information and status
     * @param name Members name (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Retrieve the member&#39;s information and status </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getClusterMembersByNameAsync(String name, Integer recursion, String filter, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getClusterMembersByNameValidateBeforeCall(name, recursion, filter, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postClusterMembersByName
     * @param name Members name (required)
     * @param body Rename a cluster member (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postClusterMembersByNameCall(String name, UpdateClusterMembersByNameRequest body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/1.0/cluster/members/{name}"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postClusterMembersByNameValidateBeforeCall(String name, UpdateClusterMembersByNameRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postClusterMembersByName(Async)");
        }
        

        okhttp3.Call localVarCall = postClusterMembersByNameCall(name, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Rename a cluster member
     * @param name Members name (required)
     * @param body Rename a cluster member (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse postClusterMembersByName(String name, UpdateClusterMembersByNameRequest body) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = postClusterMembersByNameWithHttpInfo(name, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Rename a cluster member
     * @param name Members name (required)
     * @param body Rename a cluster member (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> postClusterMembersByNameWithHttpInfo(String name, UpdateClusterMembersByNameRequest body) throws ApiException {
        okhttp3.Call localVarCall = postClusterMembersByNameValidateBeforeCall(name, body, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Rename a cluster member
     * @param name Members name (required)
     * @param body Rename a cluster member (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postClusterMembersByNameAsync(String name, UpdateClusterMembersByNameRequest body, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postClusterMembersByNameValidateBeforeCall(name, body, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putCluster
     * @param body Bootstrap or join a cluster, or disable clustering on this node (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putClusterCall(UpdateClusterRequest body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/1.0/cluster";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putClusterValidateBeforeCall(UpdateClusterRequest body, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = putClusterCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Bootstrap or join a cluster, or disable clustering on this node
     * @param body Bootstrap or join a cluster, or disable clustering on this node (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse putCluster(UpdateClusterRequest body) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = putClusterWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * Bootstrap or join a cluster, or disable clustering on this node
     * @param body Bootstrap or join a cluster, or disable clustering on this node (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> putClusterWithHttpInfo(UpdateClusterRequest body) throws ApiException {
        okhttp3.Call localVarCall = putClusterValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Bootstrap or join a cluster, or disable clustering on this node
     * @param body Bootstrap or join a cluster, or disable clustering on this node (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putClusterAsync(UpdateClusterRequest body, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putClusterValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
