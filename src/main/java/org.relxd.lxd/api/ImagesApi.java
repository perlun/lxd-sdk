/*
 * LXD
 * The services listed below are referred as .....
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relxd.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.relxd.lxd.api;

import org.relxd.lxd.ApiCallback;
import org.relxd.lxd.ApiClient;
import org.relxd.lxd.ApiException;
import org.relxd.lxd.ApiResponse;
import org.relxd.lxd.Configuration;
import org.relxd.lxd.Pair;
import org.relxd.lxd.ProgressRequestBody;
import org.relxd.lxd.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.relxd.lxd.model.BackgroundOperationResponse;
import org.relxd.lxd.model.CreateImagesAliasesByNameRequest;
import org.relxd.lxd.model.CreateImagesAliasesRequest;
import org.relxd.lxd.model.CreateImagesFingerprintExportRequest;
import org.relxd.lxd.model.CreateImagesRequest;
import org.relxd.lxd.model.ErrorResponse;
import org.relxd.lxd.model.PatchImagesFingerprintRequest;
import org.relxd.lxd.model.UpdateImagesAliasesByNameRequest;
import org.relxd.lxd.model.UpdateImagesFingerprintRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImagesApi {
    private ApiClient localVarApiClient;

    public ImagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ImagesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deleteImagesAliasesByName
     * @param name Name of the alias (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteImagesAliasesByNameCall(String name, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/images/aliases/{name}"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteImagesAliasesByNameValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteImagesAliasesByName(Async)");
        }
        

        okhttp3.Call localVarCall = deleteImagesAliasesByNameCall(name, _callback);
        return localVarCall;

    }

    /**
     * 
     * Remove an alias
     * @param name Name of the alias (required)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse deleteImagesAliasesByName(String name) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = deleteImagesAliasesByNameWithHttpInfo(name);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove an alias
     * @param name Name of the alias (required)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> deleteImagesAliasesByNameWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = deleteImagesAliasesByNameValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove an alias
     * @param name Name of the alias (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteImagesAliasesByNameAsync(String name, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteImagesAliasesByNameValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteImagesFingerprint
     * @param fingerprint Unique fingerprint (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteImagesFingerprintCall(String fingerprint, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/images/{fingerprint}"
            .replaceAll("\\{" + "fingerprint" + "\\}", localVarApiClient.escapeString(fingerprint.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteImagesFingerprintValidateBeforeCall(String fingerprint, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fingerprint' is set
        if (fingerprint == null) {
            throw new ApiException("Missing the required parameter 'fingerprint' when calling deleteImagesFingerprint(Async)");
        }
        

        okhttp3.Call localVarCall = deleteImagesFingerprintCall(fingerprint, _callback);
        return localVarCall;

    }

    /**
     * 
     * Remove an image
     * @param fingerprint Unique fingerprint (required)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse deleteImagesFingerprint(String fingerprint) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = deleteImagesFingerprintWithHttpInfo(fingerprint);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove an image
     * @param fingerprint Unique fingerprint (required)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> deleteImagesFingerprintWithHttpInfo(String fingerprint) throws ApiException {
        okhttp3.Call localVarCall = deleteImagesFingerprintValidateBeforeCall(fingerprint, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove an image
     * @param fingerprint Unique fingerprint (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteImagesFingerprintAsync(String fingerprint, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteImagesFingerprintValidateBeforeCall(fingerprint, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImages
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of images (public or private) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImagesCall(Integer recursion, String filter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/images";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (recursion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursion", recursion));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImagesValidateBeforeCall(Integer recursion, String filter, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getImagesCall(recursion, filter, _callback);
        return localVarCall;

    }

    /**
     * 
     * List of images (public or private)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of images (public or private) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse getImages(Integer recursion, String filter) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = getImagesWithHttpInfo(recursion, filter);
        return localVarResp.getData();
    }

    /**
     * 
     * List of images (public or private)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of images (public or private) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> getImagesWithHttpInfo(Integer recursion, String filter) throws ApiException {
        okhttp3.Call localVarCall = getImagesValidateBeforeCall(recursion, filter, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List of images (public or private)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of images (public or private) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImagesAsync(Integer recursion, String filter, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImagesValidateBeforeCall(recursion, filter, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImagesAliases
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of aliases (public or private based on image visibility) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImagesAliasesCall(Integer recursion, String filter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/images/aliases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (recursion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursion", recursion));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImagesAliasesValidateBeforeCall(Integer recursion, String filter, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getImagesAliasesCall(recursion, filter, _callback);
        return localVarCall;

    }

    /**
     * 
     * List of aliases (public or private based on image visibility)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of aliases (public or private based on image visibility) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse getImagesAliases(Integer recursion, String filter) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = getImagesAliasesWithHttpInfo(recursion, filter);
        return localVarResp.getData();
    }

    /**
     * 
     * List of aliases (public or private based on image visibility)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of aliases (public or private based on image visibility) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> getImagesAliasesWithHttpInfo(Integer recursion, String filter) throws ApiException {
        okhttp3.Call localVarCall = getImagesAliasesValidateBeforeCall(recursion, filter, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List of aliases (public or private based on image visibility)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of aliases (public or private based on image visibility) </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImagesAliasesAsync(Integer recursion, String filter, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImagesAliasesValidateBeforeCall(recursion, filter, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImagesAliasesByName
     * @param name Name of the alias (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snapshot information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImagesAliasesByNameCall(String name, Integer recursion, String filter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/images/aliases/{name}"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (recursion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursion", recursion));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImagesAliasesByNameValidateBeforeCall(String name, Integer recursion, String filter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getImagesAliasesByName(Async)");
        }
        

        okhttp3.Call localVarCall = getImagesAliasesByNameCall(name, recursion, filter, _callback);
        return localVarCall;

    }

    /**
     * 
     * Alias description and target
     * @param name Name of the alias (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snapshot information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse getImagesAliasesByName(String name, Integer recursion, String filter) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = getImagesAliasesByNameWithHttpInfo(name, recursion, filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Alias description and target
     * @param name Name of the alias (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snapshot information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> getImagesAliasesByNameWithHttpInfo(String name, Integer recursion, String filter) throws ApiException {
        okhttp3.Call localVarCall = getImagesAliasesByNameValidateBeforeCall(name, recursion, filter, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Alias description and target
     * @param name Name of the alias (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snapshot information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImagesAliasesByNameAsync(String name, Integer recursion, String filter, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImagesAliasesByNameValidateBeforeCall(name, recursion, filter, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImagesByFingerprintExport
     * @param fingerprint Unique fingerprint (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param secret secret (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Download the image tarball </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImagesByFingerprintExportCall(String fingerprint, Integer recursion, String filter, String secret, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/images/{fingerprint}/export"
            .replaceAll("\\{" + "fingerprint" + "\\}", localVarApiClient.escapeString(fingerprint.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (recursion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursion", recursion));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (secret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secret", secret));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImagesByFingerprintExportValidateBeforeCall(String fingerprint, Integer recursion, String filter, String secret, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fingerprint' is set
        if (fingerprint == null) {
            throw new ApiException("Missing the required parameter 'fingerprint' when calling getImagesByFingerprintExport(Async)");
        }
        

        okhttp3.Call localVarCall = getImagesByFingerprintExportCall(fingerprint, recursion, filter, secret, _callback);
        return localVarCall;

    }

    /**
     * 
     * Download the image tarball
     * @param fingerprint Unique fingerprint (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param secret secret (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Download the image tarball </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse getImagesByFingerprintExport(String fingerprint, Integer recursion, String filter, String secret) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = getImagesByFingerprintExportWithHttpInfo(fingerprint, recursion, filter, secret);
        return localVarResp.getData();
    }

    /**
     * 
     * Download the image tarball
     * @param fingerprint Unique fingerprint (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param secret secret (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Download the image tarball </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> getImagesByFingerprintExportWithHttpInfo(String fingerprint, Integer recursion, String filter, String secret) throws ApiException {
        okhttp3.Call localVarCall = getImagesByFingerprintExportValidateBeforeCall(fingerprint, recursion, filter, secret, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Download the image tarball
     * @param fingerprint Unique fingerprint (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param secret secret (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Download the image tarball </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImagesByFingerprintExportAsync(String fingerprint, Integer recursion, String filter, String secret, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImagesByFingerprintExportValidateBeforeCall(fingerprint, recursion, filter, secret, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImagesFingerprint
     * @param fingerprint Unique fingerprint (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param secret secret (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Download the image tarball </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImagesFingerprintCall(String fingerprint, Integer recursion, String filter, String secret, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/images/{fingerprint}"
            .replaceAll("\\{" + "fingerprint" + "\\}", localVarApiClient.escapeString(fingerprint.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (recursion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursion", recursion));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (secret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("secret", secret));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImagesFingerprintValidateBeforeCall(String fingerprint, Integer recursion, String filter, String secret, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fingerprint' is set
        if (fingerprint == null) {
            throw new ApiException("Missing the required parameter 'fingerprint' when calling getImagesFingerprint(Async)");
        }
        

        okhttp3.Call localVarCall = getImagesFingerprintCall(fingerprint, recursion, filter, secret, _callback);
        return localVarCall;

    }

    /**
     * 
     * Image description and metadata
     * @param fingerprint Unique fingerprint (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param secret secret (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Download the image tarball </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse getImagesFingerprint(String fingerprint, Integer recursion, String filter, String secret) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = getImagesFingerprintWithHttpInfo(fingerprint, recursion, filter, secret);
        return localVarResp.getData();
    }

    /**
     * 
     * Image description and metadata
     * @param fingerprint Unique fingerprint (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param secret secret (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Download the image tarball </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> getImagesFingerprintWithHttpInfo(String fingerprint, Integer recursion, String filter, String secret) throws ApiException {
        okhttp3.Call localVarCall = getImagesFingerprintValidateBeforeCall(fingerprint, recursion, filter, secret, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Image description and metadata
     * @param fingerprint Unique fingerprint (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param secret secret (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Download the image tarball </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImagesFingerprintAsync(String fingerprint, Integer recursion, String filter, String secret, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImagesFingerprintValidateBeforeCall(fingerprint, recursion, filter, secret, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImagesFingerprintRefresh
     * @param fingerprint Unique fingerprint (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImagesFingerprintRefreshCall(String fingerprint, Integer recursion, String filter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/images/{fingerprint}/refresh"
            .replaceAll("\\{" + "fingerprint" + "\\}", localVarApiClient.escapeString(fingerprint.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (recursion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursion", recursion));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImagesFingerprintRefreshValidateBeforeCall(String fingerprint, Integer recursion, String filter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fingerprint' is set
        if (fingerprint == null) {
            throw new ApiException("Missing the required parameter 'fingerprint' when calling getImagesFingerprintRefresh(Async)");
        }
        

        okhttp3.Call localVarCall = getImagesFingerprintRefreshCall(fingerprint, recursion, filter, _callback);
        return localVarCall;

    }

    /**
     * 
     * Refresh an image from its origin
     * @param fingerprint Unique fingerprint (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse getImagesFingerprintRefresh(String fingerprint, Integer recursion, String filter) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = getImagesFingerprintRefreshWithHttpInfo(fingerprint, recursion, filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Refresh an image from its origin
     * @param fingerprint Unique fingerprint (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> getImagesFingerprintRefreshWithHttpInfo(String fingerprint, Integer recursion, String filter) throws ApiException {
        okhttp3.Call localVarCall = getImagesFingerprintRefreshValidateBeforeCall(fingerprint, recursion, filter, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Refresh an image from its origin
     * @param fingerprint Unique fingerprint (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImagesFingerprintRefreshAsync(String fingerprint, Integer recursion, String filter, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImagesFingerprintRefreshValidateBeforeCall(fingerprint, recursion, filter, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchImagesAliasesByName
     * @param name Name of the alias (required)
     * @param body Updates the alias target or description (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchImagesAliasesByNameCall(String name, UpdateImagesAliasesByNameRequest body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/1.0/images/aliases/{name}"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchImagesAliasesByNameValidateBeforeCall(String name, UpdateImagesAliasesByNameRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling patchImagesAliasesByName(Async)");
        }
        

        okhttp3.Call localVarCall = patchImagesAliasesByNameCall(name, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Updates the alias target or description
     * @param name Name of the alias (required)
     * @param body Updates the alias target or description (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse patchImagesAliasesByName(String name, UpdateImagesAliasesByNameRequest body) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = patchImagesAliasesByNameWithHttpInfo(name, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the alias target or description
     * @param name Name of the alias (required)
     * @param body Updates the alias target or description (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> patchImagesAliasesByNameWithHttpInfo(String name, UpdateImagesAliasesByNameRequest body) throws ApiException {
        okhttp3.Call localVarCall = patchImagesAliasesByNameValidateBeforeCall(name, body, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the alias target or description
     * @param name Name of the alias (required)
     * @param body Updates the alias target or description (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchImagesAliasesByNameAsync(String name, UpdateImagesAliasesByNameRequest body, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchImagesAliasesByNameValidateBeforeCall(name, body, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchImagesFingerprint
     * @param fingerprint Unique fingerprint (required)
     * @param body Updates the image properties, update information and visibility (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchImagesFingerprintCall(String fingerprint, PatchImagesFingerprintRequest body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/1.0/images/{fingerprint}"
            .replaceAll("\\{" + "fingerprint" + "\\}", localVarApiClient.escapeString(fingerprint.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchImagesFingerprintValidateBeforeCall(String fingerprint, PatchImagesFingerprintRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fingerprint' is set
        if (fingerprint == null) {
            throw new ApiException("Missing the required parameter 'fingerprint' when calling patchImagesFingerprint(Async)");
        }
        

        okhttp3.Call localVarCall = patchImagesFingerprintCall(fingerprint, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Updates the image properties, update information and visibility
     * @param fingerprint Unique fingerprint (required)
     * @param body Updates the image properties, update information and visibility (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse patchImagesFingerprint(String fingerprint, PatchImagesFingerprintRequest body) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = patchImagesFingerprintWithHttpInfo(fingerprint, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the image properties, update information and visibility
     * @param fingerprint Unique fingerprint (required)
     * @param body Updates the image properties, update information and visibility (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> patchImagesFingerprintWithHttpInfo(String fingerprint, PatchImagesFingerprintRequest body) throws ApiException {
        okhttp3.Call localVarCall = patchImagesFingerprintValidateBeforeCall(fingerprint, body, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the image properties, update information and visibility
     * @param fingerprint Unique fingerprint (required)
     * @param body Updates the image properties, update information and visibility (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchImagesFingerprintAsync(String fingerprint, PatchImagesFingerprintRequest body, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchImagesFingerprintValidateBeforeCall(fingerprint, body, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postImages
     * @param xLXDFingerprint if set, uploaded file must match (optional)
     * @param xLXDFilename used for export (optional)
     * @param xLXDPublic defaults to false (optional)
     * @param xLXDProperties  (optional)
     * @param body Create and publish a new image (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postImagesCall(String xLXDFingerprint, String xLXDFilename, Boolean xLXDPublic, String xLXDProperties, CreateImagesRequest body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/1.0/images";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (xLXDFingerprint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("X-LXD-fingerprint", xLXDFingerprint));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xLXDFilename != null) {
            localVarHeaderParams.put("X-LXD-filename", localVarApiClient.parameterToString(xLXDFilename));
        }

        if (xLXDPublic != null) {
            localVarHeaderParams.put("X-LXD-public", localVarApiClient.parameterToString(xLXDPublic));
        }

        if (xLXDProperties != null) {
            localVarHeaderParams.put("X-LXD-properties", localVarApiClient.parameterToString(xLXDProperties));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "file"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postImagesValidateBeforeCall(String xLXDFingerprint, String xLXDFilename, Boolean xLXDPublic, String xLXDProperties, CreateImagesRequest body, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = postImagesCall(xLXDFingerprint, xLXDFilename, xLXDPublic, xLXDProperties, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create and publish a new image
     * @param xLXDFingerprint if set, uploaded file must match (optional)
     * @param xLXDFilename used for export (optional)
     * @param xLXDPublic defaults to false (optional)
     * @param xLXDProperties  (optional)
     * @param body Create and publish a new image (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse postImages(String xLXDFingerprint, String xLXDFilename, Boolean xLXDPublic, String xLXDProperties, CreateImagesRequest body) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = postImagesWithHttpInfo(xLXDFingerprint, xLXDFilename, xLXDPublic, xLXDProperties, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Create and publish a new image
     * @param xLXDFingerprint if set, uploaded file must match (optional)
     * @param xLXDFilename used for export (optional)
     * @param xLXDPublic defaults to false (optional)
     * @param xLXDProperties  (optional)
     * @param body Create and publish a new image (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> postImagesWithHttpInfo(String xLXDFingerprint, String xLXDFilename, Boolean xLXDPublic, String xLXDProperties, CreateImagesRequest body) throws ApiException {
        okhttp3.Call localVarCall = postImagesValidateBeforeCall(xLXDFingerprint, xLXDFilename, xLXDPublic, xLXDProperties, body, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create and publish a new image
     * @param xLXDFingerprint if set, uploaded file must match (optional)
     * @param xLXDFilename used for export (optional)
     * @param xLXDPublic defaults to false (optional)
     * @param xLXDProperties  (optional)
     * @param body Create and publish a new image (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postImagesAsync(String xLXDFingerprint, String xLXDFilename, Boolean xLXDPublic, String xLXDProperties, CreateImagesRequest body, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postImagesValidateBeforeCall(xLXDFingerprint, xLXDFilename, xLXDPublic, xLXDProperties, body, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postImagesAliases
     * @param body Create a new alias (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postImagesAliasesCall(CreateImagesAliasesRequest body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/1.0/images/aliases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postImagesAliasesValidateBeforeCall(CreateImagesAliasesRequest body, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = postImagesAliasesCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a new alias
     * @param body Create a new alias (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse postImagesAliases(CreateImagesAliasesRequest body) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = postImagesAliasesWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new alias
     * @param body Create a new alias (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> postImagesAliasesWithHttpInfo(CreateImagesAliasesRequest body) throws ApiException {
        okhttp3.Call localVarCall = postImagesAliasesValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new alias
     * @param body Create a new alias (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postImagesAliasesAsync(CreateImagesAliasesRequest body, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postImagesAliasesValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postImagesAliasesByName
     * @param name Name of the alias (required)
     * @param body Rename an alias (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postImagesAliasesByNameCall(String name, CreateImagesAliasesByNameRequest body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/1.0/images/aliases/{name}"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postImagesAliasesByNameValidateBeforeCall(String name, CreateImagesAliasesByNameRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postImagesAliasesByName(Async)");
        }
        

        okhttp3.Call localVarCall = postImagesAliasesByNameCall(name, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Rename an alias
     * @param name Name of the alias (required)
     * @param body Rename an alias (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse postImagesAliasesByName(String name, CreateImagesAliasesByNameRequest body) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = postImagesAliasesByNameWithHttpInfo(name, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Rename an alias
     * @param name Name of the alias (required)
     * @param body Rename an alias (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> postImagesAliasesByNameWithHttpInfo(String name, CreateImagesAliasesByNameRequest body) throws ApiException {
        okhttp3.Call localVarCall = postImagesAliasesByNameValidateBeforeCall(name, body, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Rename an alias
     * @param name Name of the alias (required)
     * @param body Rename an alias (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postImagesAliasesByNameAsync(String name, CreateImagesAliasesByNameRequest body, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postImagesAliasesByNameValidateBeforeCall(name, body, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postImagesFingerprintExport
     * @param fingerprint Unique fingerprint (required)
     * @param body Upload the image tarball (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postImagesFingerprintExportCall(String fingerprint, CreateImagesFingerprintExportRequest body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/1.0/images/{fingerprint}/export"
            .replaceAll("\\{" + "fingerprint" + "\\}", localVarApiClient.escapeString(fingerprint.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postImagesFingerprintExportValidateBeforeCall(String fingerprint, CreateImagesFingerprintExportRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fingerprint' is set
        if (fingerprint == null) {
            throw new ApiException("Missing the required parameter 'fingerprint' when calling postImagesFingerprintExport(Async)");
        }
        

        okhttp3.Call localVarCall = postImagesFingerprintExportCall(fingerprint, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Upload the image tarball
     * @param fingerprint Unique fingerprint (required)
     * @param body Upload the image tarball (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse postImagesFingerprintExport(String fingerprint, CreateImagesFingerprintExportRequest body) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = postImagesFingerprintExportWithHttpInfo(fingerprint, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Upload the image tarball
     * @param fingerprint Unique fingerprint (required)
     * @param body Upload the image tarball (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> postImagesFingerprintExportWithHttpInfo(String fingerprint, CreateImagesFingerprintExportRequest body) throws ApiException {
        okhttp3.Call localVarCall = postImagesFingerprintExportValidateBeforeCall(fingerprint, body, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Upload the image tarball
     * @param fingerprint Unique fingerprint (required)
     * @param body Upload the image tarball (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postImagesFingerprintExportAsync(String fingerprint, CreateImagesFingerprintExportRequest body, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postImagesFingerprintExportValidateBeforeCall(fingerprint, body, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postImagesFingerprintSecret
     * @param fingerprint Unique fingerprint (required)
     * @param body Generate a random token and tell LXD to expect it be used by a guest (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postImagesFingerprintSecretCall(String fingerprint, Object body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/1.0/images/{fingerprint}/secret"
            .replaceAll("\\{" + "fingerprint" + "\\}", localVarApiClient.escapeString(fingerprint.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postImagesFingerprintSecretValidateBeforeCall(String fingerprint, Object body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fingerprint' is set
        if (fingerprint == null) {
            throw new ApiException("Missing the required parameter 'fingerprint' when calling postImagesFingerprintSecret(Async)");
        }
        

        okhttp3.Call localVarCall = postImagesFingerprintSecretCall(fingerprint, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Generate a random token and tell LXD to expect it be used by a guest
     * @param fingerprint Unique fingerprint (required)
     * @param body Generate a random token and tell LXD to expect it be used by a guest (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse postImagesFingerprintSecret(String fingerprint, Object body) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = postImagesFingerprintSecretWithHttpInfo(fingerprint, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Generate a random token and tell LXD to expect it be used by a guest
     * @param fingerprint Unique fingerprint (required)
     * @param body Generate a random token and tell LXD to expect it be used by a guest (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> postImagesFingerprintSecretWithHttpInfo(String fingerprint, Object body) throws ApiException {
        okhttp3.Call localVarCall = postImagesFingerprintSecretValidateBeforeCall(fingerprint, body, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Generate a random token and tell LXD to expect it be used by a guest
     * @param fingerprint Unique fingerprint (required)
     * @param body Generate a random token and tell LXD to expect it be used by a guest (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postImagesFingerprintSecretAsync(String fingerprint, Object body, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postImagesFingerprintSecretValidateBeforeCall(fingerprint, body, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putImagesAliasesByName
     * @param name Name of the alias (required)
     * @param body Replaces the alias target or description (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putImagesAliasesByNameCall(String name, UpdateImagesAliasesByNameRequest body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/1.0/images/aliases/{name}"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putImagesAliasesByNameValidateBeforeCall(String name, UpdateImagesAliasesByNameRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putImagesAliasesByName(Async)");
        }
        

        okhttp3.Call localVarCall = putImagesAliasesByNameCall(name, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Replaces the alias target or description
     * @param name Name of the alias (required)
     * @param body Replaces the alias target or description (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse putImagesAliasesByName(String name, UpdateImagesAliasesByNameRequest body) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = putImagesAliasesByNameWithHttpInfo(name, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Replaces the alias target or description
     * @param name Name of the alias (required)
     * @param body Replaces the alias target or description (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> putImagesAliasesByNameWithHttpInfo(String name, UpdateImagesAliasesByNameRequest body) throws ApiException {
        okhttp3.Call localVarCall = putImagesAliasesByNameValidateBeforeCall(name, body, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Replaces the alias target or description
     * @param name Name of the alias (required)
     * @param body Replaces the alias target or description (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putImagesAliasesByNameAsync(String name, UpdateImagesAliasesByNameRequest body, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putImagesAliasesByNameValidateBeforeCall(name, body, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putImagesFingerprint
     * @param fingerprint Unique fingerprint (required)
     * @param body Replaces the image properties, update information and visibility (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putImagesFingerprintCall(String fingerprint, UpdateImagesFingerprintRequest body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/1.0/images/{fingerprint}"
            .replaceAll("\\{" + "fingerprint" + "\\}", localVarApiClient.escapeString(fingerprint.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putImagesFingerprintValidateBeforeCall(String fingerprint, UpdateImagesFingerprintRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'fingerprint' is set
        if (fingerprint == null) {
            throw new ApiException("Missing the required parameter 'fingerprint' when calling putImagesFingerprint(Async)");
        }
        

        okhttp3.Call localVarCall = putImagesFingerprintCall(fingerprint, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Replaces the image properties, update information and visibility
     * @param fingerprint Unique fingerprint (required)
     * @param body Replaces the image properties, update information and visibility (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse putImagesFingerprint(String fingerprint, UpdateImagesFingerprintRequest body) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = putImagesFingerprintWithHttpInfo(fingerprint, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Replaces the image properties, update information and visibility
     * @param fingerprint Unique fingerprint (required)
     * @param body Replaces the image properties, update information and visibility (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> putImagesFingerprintWithHttpInfo(String fingerprint, UpdateImagesFingerprintRequest body) throws ApiException {
        okhttp3.Call localVarCall = putImagesFingerprintValidateBeforeCall(fingerprint, body, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Replaces the image properties, update information and visibility
     * @param fingerprint Unique fingerprint (required)
     * @param body Replaces the image properties, update information and visibility (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putImagesFingerprintAsync(String fingerprint, UpdateImagesFingerprintRequest body, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putImagesFingerprintValidateBeforeCall(fingerprint, body, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
