/*
 * LXD
 * The services listed below are referred as .....
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@relxd.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.relxd.lxd.api;

import org.relxd.lxd.ApiCallback;
import org.relxd.lxd.ApiClient;
import org.relxd.lxd.ApiException;
import org.relxd.lxd.ApiResponse;
import org.relxd.lxd.Configuration;
import org.relxd.lxd.Pair;
import org.relxd.lxd.ProgressRequestBody;
import org.relxd.lxd.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.relxd.lxd.model.BackgroundOperationResponse;
import org.relxd.lxd.model.CreateStoragePoolsByNameVolumesByTypeNameRequest;
import org.relxd.lxd.model.CreateStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequest;
import org.relxd.lxd.model.CreateStoragePoolsByNameVolumesByTypeNameSnapshotsRequest;
import org.relxd.lxd.model.CreateStoragePoolsByNameVolumesByTypeRequest;
import org.relxd.lxd.model.CreateStoragePoolsByNameVolumesRequest;
import org.relxd.lxd.model.CreateStoragePoolsRequest;
import org.relxd.lxd.model.ErrorResponse;
import org.relxd.lxd.model.PatchStoragePoolsByNameRequest;
import org.relxd.lxd.model.UpdateStoragePoolsByNameRequest;
import org.relxd.lxd.model.UpdateStoragePoolsByNameVolumesByTypeNameRequest;
import org.relxd.lxd.model.UpdateStoragePoolsByNameVolumesByTypeNameRequest2;
import org.relxd.lxd.model.UpdateStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StoragePoolsApi {
    private ApiClient localVarApiClient;

    public StoragePoolsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StoragePoolsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for deleteStoragePoolsByName
     * @param pool Storage pool name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStoragePoolsByNameCall(String pool, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/storage-pools/{pool}"
            .replaceAll("\\{" + "pool" + "\\}", localVarApiClient.escapeString(pool.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteStoragePoolsByNameValidateBeforeCall(String pool, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pool' is set
        if (pool == null) {
            throw new ApiException("Missing the required parameter 'pool' when calling deleteStoragePoolsByName(Async)");
        }
        

        okhttp3.Call localVarCall = deleteStoragePoolsByNameCall(pool, _callback);
        return localVarCall;

    }

    /**
     * 
     * Remove a storage pool
     * @param pool Storage pool name (required)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse deleteStoragePoolsByName(String pool) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = deleteStoragePoolsByNameWithHttpInfo(pool);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove a storage pool
     * @param pool Storage pool name (required)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> deleteStoragePoolsByNameWithHttpInfo(String pool) throws ApiException {
        okhttp3.Call localVarCall = deleteStoragePoolsByNameValidateBeforeCall(pool, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove a storage pool
     * @param pool Storage pool name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStoragePoolsByNameAsync(String pool, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteStoragePoolsByNameValidateBeforeCall(pool, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteStoragePoolsByNameVolumesByTypeName
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStoragePoolsByNameVolumesByTypeNameCall(String pool, String type, String name, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/storage-pools/{pool}/volumes/{type}/{name}"
            .replaceAll("\\{" + "pool" + "\\}", localVarApiClient.escapeString(pool.toString()))
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()))
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteStoragePoolsByNameVolumesByTypeNameValidateBeforeCall(String pool, String type, String name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pool' is set
        if (pool == null) {
            throw new ApiException("Missing the required parameter 'pool' when calling deleteStoragePoolsByNameVolumesByTypeName(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling deleteStoragePoolsByNameVolumesByTypeName(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteStoragePoolsByNameVolumesByTypeName(Async)");
        }
        

        okhttp3.Call localVarCall = deleteStoragePoolsByNameVolumesByTypeNameCall(pool, type, name, _callback);
        return localVarCall;

    }

    /**
     * 
     * Delete a storage volume of a given type on a given storage pool
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse deleteStoragePoolsByNameVolumesByTypeName(String pool, String type, String name) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = deleteStoragePoolsByNameVolumesByTypeNameWithHttpInfo(pool, type, name);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete a storage volume of a given type on a given storage pool
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> deleteStoragePoolsByNameVolumesByTypeNameWithHttpInfo(String pool, String type, String name) throws ApiException {
        okhttp3.Call localVarCall = deleteStoragePoolsByNameVolumesByTypeNameValidateBeforeCall(pool, type, name, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete a storage volume of a given type on a given storage pool
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStoragePoolsByNameVolumesByTypeNameAsync(String pool, String type, String name, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteStoragePoolsByNameVolumesByTypeNameValidateBeforeCall(pool, type, name, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteStoragePoolsByNameVolumesByTypeNameSnapshotsName
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStoragePoolsByNameVolumesByTypeNameSnapshotsNameCall(String pool, String type, String name, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/storage-pools/{pool}/volumes/{type}/{name}/snapshots/name"
            .replaceAll("\\{" + "pool" + "\\}", localVarApiClient.escapeString(pool.toString()))
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()))
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteStoragePoolsByNameVolumesByTypeNameSnapshotsNameValidateBeforeCall(String pool, String type, String name, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pool' is set
        if (pool == null) {
            throw new ApiException("Missing the required parameter 'pool' when calling deleteStoragePoolsByNameVolumesByTypeNameSnapshotsName(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling deleteStoragePoolsByNameVolumesByTypeNameSnapshotsName(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteStoragePoolsByNameVolumesByTypeNameSnapshotsName(Async)");
        }
        

        okhttp3.Call localVarCall = deleteStoragePoolsByNameVolumesByTypeNameSnapshotsNameCall(pool, type, name, _callback);
        return localVarCall;

    }

    /**
     * 
     * Remove the volume snapshot
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse deleteStoragePoolsByNameVolumesByTypeNameSnapshotsName(String pool, String type, String name) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = deleteStoragePoolsByNameVolumesByTypeNameSnapshotsNameWithHttpInfo(pool, type, name);
        return localVarResp.getData();
    }

    /**
     * 
     * Remove the volume snapshot
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> deleteStoragePoolsByNameVolumesByTypeNameSnapshotsNameWithHttpInfo(String pool, String type, String name) throws ApiException {
        okhttp3.Call localVarCall = deleteStoragePoolsByNameVolumesByTypeNameSnapshotsNameValidateBeforeCall(pool, type, name, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Remove the volume snapshot
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteStoragePoolsByNameVolumesByTypeNameSnapshotsNameAsync(String pool, String type, String name, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteStoragePoolsByNameVolumesByTypeNameSnapshotsNameValidateBeforeCall(pool, type, name, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStoragePools
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of storage pools </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStoragePoolsCall(Integer recursion, String filter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/storage-pools";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (recursion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursion", recursion));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStoragePoolsValidateBeforeCall(Integer recursion, String filter, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getStoragePoolsCall(recursion, filter, _callback);
        return localVarCall;

    }

    /**
     * 
     * List of storage pools
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of storage pools </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse getStoragePools(Integer recursion, String filter) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = getStoragePoolsWithHttpInfo(recursion, filter);
        return localVarResp.getData();
    }

    /**
     * 
     * List of storage pools
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of storage pools </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> getStoragePoolsWithHttpInfo(Integer recursion, String filter) throws ApiException {
        okhttp3.Call localVarCall = getStoragePoolsValidateBeforeCall(recursion, filter, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List of storage pools
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of storage pools </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStoragePoolsAsync(Integer recursion, String filter, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStoragePoolsValidateBeforeCall(recursion, filter, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStoragePoolsByName
     * @param pool Storage pool name (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about a storage pool </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStoragePoolsByNameCall(String pool, Integer recursion, String filter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/storage-pools/{pool}"
            .replaceAll("\\{" + "pool" + "\\}", localVarApiClient.escapeString(pool.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (recursion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursion", recursion));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStoragePoolsByNameValidateBeforeCall(String pool, Integer recursion, String filter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pool' is set
        if (pool == null) {
            throw new ApiException("Missing the required parameter 'pool' when calling getStoragePoolsByName(Async)");
        }
        

        okhttp3.Call localVarCall = getStoragePoolsByNameCall(pool, recursion, filter, _callback);
        return localVarCall;

    }

    /**
     * 
     * Information about a storage pool
     * @param pool Storage pool name (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about a storage pool </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse getStoragePoolsByName(String pool, Integer recursion, String filter) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = getStoragePoolsByNameWithHttpInfo(pool, recursion, filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Information about a storage pool
     * @param pool Storage pool name (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about a storage pool </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> getStoragePoolsByNameWithHttpInfo(String pool, Integer recursion, String filter) throws ApiException {
        okhttp3.Call localVarCall = getStoragePoolsByNameValidateBeforeCall(pool, recursion, filter, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Information about a storage pool
     * @param pool Storage pool name (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about a storage pool </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStoragePoolsByNameAsync(String pool, Integer recursion, String filter, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStoragePoolsByNameValidateBeforeCall(pool, recursion, filter, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStoragePoolsByNameResources
     * @param pool Profiles name (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about the resources available to the storage pool </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStoragePoolsByNameResourcesCall(String pool, Integer recursion, String filter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/storage-pools/{pool}/resources"
            .replaceAll("\\{" + "pool" + "\\}", localVarApiClient.escapeString(pool.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (recursion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursion", recursion));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStoragePoolsByNameResourcesValidateBeforeCall(String pool, Integer recursion, String filter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pool' is set
        if (pool == null) {
            throw new ApiException("Missing the required parameter 'pool' when calling getStoragePoolsByNameResources(Async)");
        }
        

        okhttp3.Call localVarCall = getStoragePoolsByNameResourcesCall(pool, recursion, filter, _callback);
        return localVarCall;

    }

    /**
     * 
     * Information about the resources available to the storage pool
     * @param pool Profiles name (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about the resources available to the storage pool </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse getStoragePoolsByNameResources(String pool, Integer recursion, String filter) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = getStoragePoolsByNameResourcesWithHttpInfo(pool, recursion, filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Information about the resources available to the storage pool
     * @param pool Profiles name (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about the resources available to the storage pool </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> getStoragePoolsByNameResourcesWithHttpInfo(String pool, Integer recursion, String filter) throws ApiException {
        okhttp3.Call localVarCall = getStoragePoolsByNameResourcesValidateBeforeCall(pool, recursion, filter, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Information about the resources available to the storage pool
     * @param pool Profiles name (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about the resources available to the storage pool </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStoragePoolsByNameResourcesAsync(String pool, Integer recursion, String filter, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStoragePoolsByNameResourcesValidateBeforeCall(pool, recursion, filter, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStoragePoolsByNameVolumes
     * @param pool Storage pool name (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of storage volumes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStoragePoolsByNameVolumesCall(String pool, Integer recursion, String filter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/storage-pools/{pool}/volumes"
            .replaceAll("\\{" + "pool" + "\\}", localVarApiClient.escapeString(pool.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (recursion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursion", recursion));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStoragePoolsByNameVolumesValidateBeforeCall(String pool, Integer recursion, String filter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pool' is set
        if (pool == null) {
            throw new ApiException("Missing the required parameter 'pool' when calling getStoragePoolsByNameVolumes(Async)");
        }
        

        okhttp3.Call localVarCall = getStoragePoolsByNameVolumesCall(pool, recursion, filter, _callback);
        return localVarCall;

    }

    /**
     * 
     * List of storage volumes
     * @param pool Storage pool name (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of storage volumes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse getStoragePoolsByNameVolumes(String pool, Integer recursion, String filter) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = getStoragePoolsByNameVolumesWithHttpInfo(pool, recursion, filter);
        return localVarResp.getData();
    }

    /**
     * 
     * List of storage volumes
     * @param pool Storage pool name (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of storage volumes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> getStoragePoolsByNameVolumesWithHttpInfo(String pool, Integer recursion, String filter) throws ApiException {
        okhttp3.Call localVarCall = getStoragePoolsByNameVolumesValidateBeforeCall(pool, recursion, filter, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List of storage volumes
     * @param pool Storage pool name (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of storage volumes </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStoragePoolsByNameVolumesAsync(String pool, Integer recursion, String filter, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStoragePoolsByNameVolumesValidateBeforeCall(pool, recursion, filter, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStoragePoolsByNameVolumesByTypeName
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about a storage volume of a given type on a storage pool </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStoragePoolsByNameVolumesByTypeNameCall(String pool, String type, String name, Integer recursion, String filter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/storage-pools/{pool}/volumes/{type}/{name}"
            .replaceAll("\\{" + "pool" + "\\}", localVarApiClient.escapeString(pool.toString()))
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()))
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (recursion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursion", recursion));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStoragePoolsByNameVolumesByTypeNameValidateBeforeCall(String pool, String type, String name, Integer recursion, String filter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pool' is set
        if (pool == null) {
            throw new ApiException("Missing the required parameter 'pool' when calling getStoragePoolsByNameVolumesByTypeName(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getStoragePoolsByNameVolumesByTypeName(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getStoragePoolsByNameVolumesByTypeName(Async)");
        }
        

        okhttp3.Call localVarCall = getStoragePoolsByNameVolumesByTypeNameCall(pool, type, name, recursion, filter, _callback);
        return localVarCall;

    }

    /**
     * 
     * Information about a storage volume of a given type on a storage pool
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about a storage volume of a given type on a storage pool </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse getStoragePoolsByNameVolumesByTypeName(String pool, String type, String name, Integer recursion, String filter) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = getStoragePoolsByNameVolumesByTypeNameWithHttpInfo(pool, type, name, recursion, filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Information about a storage volume of a given type on a storage pool
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about a storage volume of a given type on a storage pool </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> getStoragePoolsByNameVolumesByTypeNameWithHttpInfo(String pool, String type, String name, Integer recursion, String filter) throws ApiException {
        okhttp3.Call localVarCall = getStoragePoolsByNameVolumesByTypeNameValidateBeforeCall(pool, type, name, recursion, filter, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Information about a storage volume of a given type on a storage pool
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Information about a storage volume of a given type on a storage pool </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStoragePoolsByNameVolumesByTypeNameAsync(String pool, String type, String name, Integer recursion, String filter, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStoragePoolsByNameVolumesByTypeNameValidateBeforeCall(pool, type, name, recursion, filter, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStoragePoolsByNameVolumesByTypeNameSnapshots
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of volume snapshots </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStoragePoolsByNameVolumesByTypeNameSnapshotsCall(String pool, String type, String name, Integer recursion, String filter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/storage-pools/{pool}/volumes/{type}/{name}/snapshots"
            .replaceAll("\\{" + "pool" + "\\}", localVarApiClient.escapeString(pool.toString()))
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()))
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (recursion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursion", recursion));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStoragePoolsByNameVolumesByTypeNameSnapshotsValidateBeforeCall(String pool, String type, String name, Integer recursion, String filter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pool' is set
        if (pool == null) {
            throw new ApiException("Missing the required parameter 'pool' when calling getStoragePoolsByNameVolumesByTypeNameSnapshots(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getStoragePoolsByNameVolumesByTypeNameSnapshots(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getStoragePoolsByNameVolumesByTypeNameSnapshots(Async)");
        }
        

        okhttp3.Call localVarCall = getStoragePoolsByNameVolumesByTypeNameSnapshotsCall(pool, type, name, recursion, filter, _callback);
        return localVarCall;

    }

    /**
     * 
     * List of volume snapshots
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of volume snapshots </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse getStoragePoolsByNameVolumesByTypeNameSnapshots(String pool, String type, String name, Integer recursion, String filter) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = getStoragePoolsByNameVolumesByTypeNameSnapshotsWithHttpInfo(pool, type, name, recursion, filter);
        return localVarResp.getData();
    }

    /**
     * 
     * List of volume snapshots
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of volume snapshots </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> getStoragePoolsByNameVolumesByTypeNameSnapshotsWithHttpInfo(String pool, String type, String name, Integer recursion, String filter) throws ApiException {
        okhttp3.Call localVarCall = getStoragePoolsByNameVolumesByTypeNameSnapshotsValidateBeforeCall(pool, type, name, recursion, filter, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List of volume snapshots
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of volume snapshots </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStoragePoolsByNameVolumesByTypeNameSnapshotsAsync(String pool, String type, String name, Integer recursion, String filter, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStoragePoolsByNameVolumesByTypeNameSnapshotsValidateBeforeCall(pool, type, name, recursion, filter, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStoragePoolsByNameVolumesByTypeNameSnapshotsName
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snapshot information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStoragePoolsByNameVolumesByTypeNameSnapshotsNameCall(String pool, String type, String name, Integer recursion, String filter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.0/storage-pools/{pool}/volumes/{type}/{name}/snapshots/name"
            .replaceAll("\\{" + "pool" + "\\}", localVarApiClient.escapeString(pool.toString()))
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()))
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (recursion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("recursion", recursion));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStoragePoolsByNameVolumesByTypeNameSnapshotsNameValidateBeforeCall(String pool, String type, String name, Integer recursion, String filter, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pool' is set
        if (pool == null) {
            throw new ApiException("Missing the required parameter 'pool' when calling getStoragePoolsByNameVolumesByTypeNameSnapshotsName(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getStoragePoolsByNameVolumesByTypeNameSnapshotsName(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getStoragePoolsByNameVolumesByTypeNameSnapshotsName(Async)");
        }
        

        okhttp3.Call localVarCall = getStoragePoolsByNameVolumesByTypeNameSnapshotsNameCall(pool, type, name, recursion, filter, _callback);
        return localVarCall;

    }

    /**
     * 
     * Snapshot information
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snapshot information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse getStoragePoolsByNameVolumesByTypeNameSnapshotsName(String pool, String type, String name, Integer recursion, String filter) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = getStoragePoolsByNameVolumesByTypeNameSnapshotsNameWithHttpInfo(pool, type, name, recursion, filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Snapshot information
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snapshot information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> getStoragePoolsByNameVolumesByTypeNameSnapshotsNameWithHttpInfo(String pool, String type, String name, Integer recursion, String filter) throws ApiException {
        okhttp3.Call localVarCall = getStoragePoolsByNameVolumesByTypeNameSnapshotsNameValidateBeforeCall(pool, type, name, recursion, filter, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Snapshot information
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param recursion To optimize queries of large lists, recursion is implemented for collections. The default value is 0 which means that collection member URLs are returned. Setting it to 1 will have those URLs be replaced by the object they point to (typically a dict). (optional)
     * @param filter There is no default value for filter which means that all results found will be returned. The language follows the OData conventions for structuring REST API filtering logic. Logical operators are also supported for filtering: not(not), equals(eq), not equals(ne), and(and), or(or). Filters are evaluated with left associativity. Values with spaces can be surrounded with quotes. Nesting filtering is also supported. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snapshot information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStoragePoolsByNameVolumesByTypeNameSnapshotsNameAsync(String pool, String type, String name, Integer recursion, String filter, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStoragePoolsByNameVolumesByTypeNameSnapshotsNameValidateBeforeCall(pool, type, name, recursion, filter, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchStoragePoolsByName
     * @param pool Storage pool name (required)
     * @param body Update the storage pool information (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchStoragePoolsByNameCall(String pool, PatchStoragePoolsByNameRequest body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/1.0/storage-pools/{pool}"
            .replaceAll("\\{" + "pool" + "\\}", localVarApiClient.escapeString(pool.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchStoragePoolsByNameValidateBeforeCall(String pool, PatchStoragePoolsByNameRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pool' is set
        if (pool == null) {
            throw new ApiException("Missing the required parameter 'pool' when calling patchStoragePoolsByName(Async)");
        }
        

        okhttp3.Call localVarCall = patchStoragePoolsByNameCall(pool, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update the storage pool information
     * @param pool Storage pool name (required)
     * @param body Update the storage pool information (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse patchStoragePoolsByName(String pool, PatchStoragePoolsByNameRequest body) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = patchStoragePoolsByNameWithHttpInfo(pool, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Update the storage pool information
     * @param pool Storage pool name (required)
     * @param body Update the storage pool information (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> patchStoragePoolsByNameWithHttpInfo(String pool, PatchStoragePoolsByNameRequest body) throws ApiException {
        okhttp3.Call localVarCall = patchStoragePoolsByNameValidateBeforeCall(pool, body, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update the storage pool information
     * @param pool Storage pool name (required)
     * @param body Update the storage pool information (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchStoragePoolsByNameAsync(String pool, PatchStoragePoolsByNameRequest body, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchStoragePoolsByNameValidateBeforeCall(pool, body, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for patchStoragePoolsByNameVolumesByTypeName
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param body Update the storage volume information (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchStoragePoolsByNameVolumesByTypeNameCall(String pool, String type, String name, UpdateStoragePoolsByNameVolumesByTypeNameRequest2 body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/1.0/storage-pools/{pool}/volumes/{type}/{name}"
            .replaceAll("\\{" + "pool" + "\\}", localVarApiClient.escapeString(pool.toString()))
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()))
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call patchStoragePoolsByNameVolumesByTypeNameValidateBeforeCall(String pool, String type, String name, UpdateStoragePoolsByNameVolumesByTypeNameRequest2 body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pool' is set
        if (pool == null) {
            throw new ApiException("Missing the required parameter 'pool' when calling patchStoragePoolsByNameVolumesByTypeName(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling patchStoragePoolsByNameVolumesByTypeName(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling patchStoragePoolsByNameVolumesByTypeName(Async)");
        }
        

        okhttp3.Call localVarCall = patchStoragePoolsByNameVolumesByTypeNameCall(pool, type, name, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update the storage volume information
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param body Update the storage volume information (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse patchStoragePoolsByNameVolumesByTypeName(String pool, String type, String name, UpdateStoragePoolsByNameVolumesByTypeNameRequest2 body) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = patchStoragePoolsByNameVolumesByTypeNameWithHttpInfo(pool, type, name, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Update the storage volume information
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param body Update the storage volume information (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> patchStoragePoolsByNameVolumesByTypeNameWithHttpInfo(String pool, String type, String name, UpdateStoragePoolsByNameVolumesByTypeNameRequest2 body) throws ApiException {
        okhttp3.Call localVarCall = patchStoragePoolsByNameVolumesByTypeNameValidateBeforeCall(pool, type, name, body, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update the storage volume information
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param body Update the storage volume information (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call patchStoragePoolsByNameVolumesByTypeNameAsync(String pool, String type, String name, UpdateStoragePoolsByNameVolumesByTypeNameRequest2 body, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = patchStoragePoolsByNameVolumesByTypeNameValidateBeforeCall(pool, type, name, body, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postStoragePools
     * @param body Define a new storage pool (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postStoragePoolsCall(CreateStoragePoolsRequest body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/1.0/storage-pools";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postStoragePoolsValidateBeforeCall(CreateStoragePoolsRequest body, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = postStoragePoolsCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Define a new storage pool
     * @param body Define a new storage pool (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse postStoragePools(CreateStoragePoolsRequest body) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = postStoragePoolsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * Define a new storage pool
     * @param body Define a new storage pool (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> postStoragePoolsWithHttpInfo(CreateStoragePoolsRequest body) throws ApiException {
        okhttp3.Call localVarCall = postStoragePoolsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Define a new storage pool
     * @param body Define a new storage pool (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postStoragePoolsAsync(CreateStoragePoolsRequest body, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postStoragePoolsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postStoragePoolsByNameVolumes
     * @param pool Storage pool name (required)
     * @param body Create a new storage volume on a given storage pool (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postStoragePoolsByNameVolumesCall(String pool, CreateStoragePoolsByNameVolumesRequest body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/1.0/storage-pools/{pool}/volumes"
            .replaceAll("\\{" + "pool" + "\\}", localVarApiClient.escapeString(pool.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postStoragePoolsByNameVolumesValidateBeforeCall(String pool, CreateStoragePoolsByNameVolumesRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pool' is set
        if (pool == null) {
            throw new ApiException("Missing the required parameter 'pool' when calling postStoragePoolsByNameVolumes(Async)");
        }
        

        okhttp3.Call localVarCall = postStoragePoolsByNameVolumesCall(pool, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a new storage volume on a given storage pool
     * @param pool Storage pool name (required)
     * @param body Create a new storage volume on a given storage pool (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse postStoragePoolsByNameVolumes(String pool, CreateStoragePoolsByNameVolumesRequest body) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = postStoragePoolsByNameVolumesWithHttpInfo(pool, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new storage volume on a given storage pool
     * @param pool Storage pool name (required)
     * @param body Create a new storage volume on a given storage pool (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> postStoragePoolsByNameVolumesWithHttpInfo(String pool, CreateStoragePoolsByNameVolumesRequest body) throws ApiException {
        okhttp3.Call localVarCall = postStoragePoolsByNameVolumesValidateBeforeCall(pool, body, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new storage volume on a given storage pool
     * @param pool Storage pool name (required)
     * @param body Create a new storage volume on a given storage pool (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postStoragePoolsByNameVolumesAsync(String pool, CreateStoragePoolsByNameVolumesRequest body, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postStoragePoolsByNameVolumesValidateBeforeCall(pool, body, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postStoragePoolsByNameVolumesByType
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param body Create a new storage volume of a particular type on a given storage pool (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postStoragePoolsByNameVolumesByTypeCall(String pool, String type, CreateStoragePoolsByNameVolumesByTypeRequest body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/1.0/storage-pools/{pool}/volumes/{type}"
            .replaceAll("\\{" + "pool" + "\\}", localVarApiClient.escapeString(pool.toString()))
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postStoragePoolsByNameVolumesByTypeValidateBeforeCall(String pool, String type, CreateStoragePoolsByNameVolumesByTypeRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pool' is set
        if (pool == null) {
            throw new ApiException("Missing the required parameter 'pool' when calling postStoragePoolsByNameVolumesByType(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling postStoragePoolsByNameVolumesByType(Async)");
        }
        

        okhttp3.Call localVarCall = postStoragePoolsByNameVolumesByTypeCall(pool, type, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a new storage volume of a particular type on a given storage pool
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param body Create a new storage volume of a particular type on a given storage pool (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse postStoragePoolsByNameVolumesByType(String pool, String type, CreateStoragePoolsByNameVolumesByTypeRequest body) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = postStoragePoolsByNameVolumesByTypeWithHttpInfo(pool, type, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new storage volume of a particular type on a given storage pool
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param body Create a new storage volume of a particular type on a given storage pool (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> postStoragePoolsByNameVolumesByTypeWithHttpInfo(String pool, String type, CreateStoragePoolsByNameVolumesByTypeRequest body) throws ApiException {
        okhttp3.Call localVarCall = postStoragePoolsByNameVolumesByTypeValidateBeforeCall(pool, type, body, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new storage volume of a particular type on a given storage pool
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param body Create a new storage volume of a particular type on a given storage pool (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postStoragePoolsByNameVolumesByTypeAsync(String pool, String type, CreateStoragePoolsByNameVolumesByTypeRequest body, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postStoragePoolsByNameVolumesByTypeValidateBeforeCall(pool, type, body, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postStoragePoolsByNameVolumesByTypeName
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param body Rename a storage volume on a given storage pool (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Instances By Name Exec Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postStoragePoolsByNameVolumesByTypeNameCall(String pool, String type, String name, CreateStoragePoolsByNameVolumesByTypeNameRequest body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/1.0/storage-pools/{pool}/volumes/{type}/{name}"
            .replaceAll("\\{" + "pool" + "\\}", localVarApiClient.escapeString(pool.toString()))
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()))
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postStoragePoolsByNameVolumesByTypeNameValidateBeforeCall(String pool, String type, String name, CreateStoragePoolsByNameVolumesByTypeNameRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pool' is set
        if (pool == null) {
            throw new ApiException("Missing the required parameter 'pool' when calling postStoragePoolsByNameVolumesByTypeName(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling postStoragePoolsByNameVolumesByTypeName(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postStoragePoolsByNameVolumesByTypeName(Async)");
        }
        

        okhttp3.Call localVarCall = postStoragePoolsByNameVolumesByTypeNameCall(pool, type, name, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Rename a storage volume on a given storage pool
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param body Rename a storage volume on a given storage pool (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Instances By Name Exec Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse postStoragePoolsByNameVolumesByTypeName(String pool, String type, String name, CreateStoragePoolsByNameVolumesByTypeNameRequest body) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = postStoragePoolsByNameVolumesByTypeNameWithHttpInfo(pool, type, name, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Rename a storage volume on a given storage pool
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param body Rename a storage volume on a given storage pool (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Instances By Name Exec Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> postStoragePoolsByNameVolumesByTypeNameWithHttpInfo(String pool, String type, String name, CreateStoragePoolsByNameVolumesByTypeNameRequest body) throws ApiException {
        okhttp3.Call localVarCall = postStoragePoolsByNameVolumesByTypeNameValidateBeforeCall(pool, type, name, body, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Rename a storage volume on a given storage pool
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param body Rename a storage volume on a given storage pool (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Create Instances By Name Exec Response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postStoragePoolsByNameVolumesByTypeNameAsync(String pool, String type, String name, CreateStoragePoolsByNameVolumesByTypeNameRequest body, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postStoragePoolsByNameVolumesByTypeNameValidateBeforeCall(pool, type, name, body, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postStoragePoolsByNameVolumesByTypeNameSnapshots
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param body Create a new volume snapshot (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postStoragePoolsByNameVolumesByTypeNameSnapshotsCall(String pool, String type, String name, CreateStoragePoolsByNameVolumesByTypeNameSnapshotsRequest body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/1.0/storage-pools/{pool}/volumes/{type}/{name}/snapshots"
            .replaceAll("\\{" + "pool" + "\\}", localVarApiClient.escapeString(pool.toString()))
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()))
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postStoragePoolsByNameVolumesByTypeNameSnapshotsValidateBeforeCall(String pool, String type, String name, CreateStoragePoolsByNameVolumesByTypeNameSnapshotsRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pool' is set
        if (pool == null) {
            throw new ApiException("Missing the required parameter 'pool' when calling postStoragePoolsByNameVolumesByTypeNameSnapshots(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling postStoragePoolsByNameVolumesByTypeNameSnapshots(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postStoragePoolsByNameVolumesByTypeNameSnapshots(Async)");
        }
        

        okhttp3.Call localVarCall = postStoragePoolsByNameVolumesByTypeNameSnapshotsCall(pool, type, name, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a new volume snapshot
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param body Create a new volume snapshot (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse postStoragePoolsByNameVolumesByTypeNameSnapshots(String pool, String type, String name, CreateStoragePoolsByNameVolumesByTypeNameSnapshotsRequest body) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = postStoragePoolsByNameVolumesByTypeNameSnapshotsWithHttpInfo(pool, type, name, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new volume snapshot
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param body Create a new volume snapshot (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> postStoragePoolsByNameVolumesByTypeNameSnapshotsWithHttpInfo(String pool, String type, String name, CreateStoragePoolsByNameVolumesByTypeNameSnapshotsRequest body) throws ApiException {
        okhttp3.Call localVarCall = postStoragePoolsByNameVolumesByTypeNameSnapshotsValidateBeforeCall(pool, type, name, body, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new volume snapshot
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param body Create a new volume snapshot (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postStoragePoolsByNameVolumesByTypeNameSnapshotsAsync(String pool, String type, String name, CreateStoragePoolsByNameVolumesByTypeNameSnapshotsRequest body, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postStoragePoolsByNameVolumesByTypeNameSnapshotsValidateBeforeCall(pool, type, name, body, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postStoragePoolsByNameVolumesByTypeNameSnapshotsName
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param body Used to rename the volume snapshot (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postStoragePoolsByNameVolumesByTypeNameSnapshotsNameCall(String pool, String type, String name, CreateStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequest body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/1.0/storage-pools/{pool}/volumes/{type}/{name}/snapshots/name"
            .replaceAll("\\{" + "pool" + "\\}", localVarApiClient.escapeString(pool.toString()))
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()))
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postStoragePoolsByNameVolumesByTypeNameSnapshotsNameValidateBeforeCall(String pool, String type, String name, CreateStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pool' is set
        if (pool == null) {
            throw new ApiException("Missing the required parameter 'pool' when calling postStoragePoolsByNameVolumesByTypeNameSnapshotsName(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling postStoragePoolsByNameVolumesByTypeNameSnapshotsName(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling postStoragePoolsByNameVolumesByTypeNameSnapshotsName(Async)");
        }
        

        okhttp3.Call localVarCall = postStoragePoolsByNameVolumesByTypeNameSnapshotsNameCall(pool, type, name, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Used to rename the volume snapshot
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param body Used to rename the volume snapshot (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse postStoragePoolsByNameVolumesByTypeNameSnapshotsName(String pool, String type, String name, CreateStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequest body) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = postStoragePoolsByNameVolumesByTypeNameSnapshotsNameWithHttpInfo(pool, type, name, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Used to rename the volume snapshot
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param body Used to rename the volume snapshot (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> postStoragePoolsByNameVolumesByTypeNameSnapshotsNameWithHttpInfo(String pool, String type, String name, CreateStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequest body) throws ApiException {
        okhttp3.Call localVarCall = postStoragePoolsByNameVolumesByTypeNameSnapshotsNameValidateBeforeCall(pool, type, name, body, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Used to rename the volume snapshot
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param body Used to rename the volume snapshot (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> A basic background return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postStoragePoolsByNameVolumesByTypeNameSnapshotsNameAsync(String pool, String type, String name, CreateStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequest body, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postStoragePoolsByNameVolumesByTypeNameSnapshotsNameValidateBeforeCall(pool, type, name, body, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putStoragePoolsByName
     * @param pool Storage pool name (required)
     * @param body Replace the storage pool information (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putStoragePoolsByNameCall(String pool, UpdateStoragePoolsByNameRequest body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/1.0/storage-pools/{pool}"
            .replaceAll("\\{" + "pool" + "\\}", localVarApiClient.escapeString(pool.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putStoragePoolsByNameValidateBeforeCall(String pool, UpdateStoragePoolsByNameRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pool' is set
        if (pool == null) {
            throw new ApiException("Missing the required parameter 'pool' when calling putStoragePoolsByName(Async)");
        }
        

        okhttp3.Call localVarCall = putStoragePoolsByNameCall(pool, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Replace the storage pool information
     * @param pool Storage pool name (required)
     * @param body Replace the storage pool information (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse putStoragePoolsByName(String pool, UpdateStoragePoolsByNameRequest body) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = putStoragePoolsByNameWithHttpInfo(pool, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Replace the storage pool information
     * @param pool Storage pool name (required)
     * @param body Replace the storage pool information (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> putStoragePoolsByNameWithHttpInfo(String pool, UpdateStoragePoolsByNameRequest body) throws ApiException {
        okhttp3.Call localVarCall = putStoragePoolsByNameValidateBeforeCall(pool, body, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Replace the storage pool information
     * @param pool Storage pool name (required)
     * @param body Replace the storage pool information (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putStoragePoolsByNameAsync(String pool, UpdateStoragePoolsByNameRequest body, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putStoragePoolsByNameValidateBeforeCall(pool, body, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putStoragePoolsByNameVolumesByTypeName
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param body Replace the storage volume information or restore from snapshot (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putStoragePoolsByNameVolumesByTypeNameCall(String pool, String type, String name, UpdateStoragePoolsByNameVolumesByTypeNameRequest body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/1.0/storage-pools/{pool}/volumes/{type}/{name}"
            .replaceAll("\\{" + "pool" + "\\}", localVarApiClient.escapeString(pool.toString()))
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()))
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putStoragePoolsByNameVolumesByTypeNameValidateBeforeCall(String pool, String type, String name, UpdateStoragePoolsByNameVolumesByTypeNameRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pool' is set
        if (pool == null) {
            throw new ApiException("Missing the required parameter 'pool' when calling putStoragePoolsByNameVolumesByTypeName(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling putStoragePoolsByNameVolumesByTypeName(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putStoragePoolsByNameVolumesByTypeName(Async)");
        }
        

        okhttp3.Call localVarCall = putStoragePoolsByNameVolumesByTypeNameCall(pool, type, name, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Replace the storage volume information or restore from snapshot
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param body Replace the storage volume information or restore from snapshot (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse putStoragePoolsByNameVolumesByTypeName(String pool, String type, String name, UpdateStoragePoolsByNameVolumesByTypeNameRequest body) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = putStoragePoolsByNameVolumesByTypeNameWithHttpInfo(pool, type, name, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Replace the storage volume information or restore from snapshot
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param body Replace the storage volume information or restore from snapshot (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> putStoragePoolsByNameVolumesByTypeNameWithHttpInfo(String pool, String type, String name, UpdateStoragePoolsByNameVolumesByTypeNameRequest body) throws ApiException {
        okhttp3.Call localVarCall = putStoragePoolsByNameVolumesByTypeNameValidateBeforeCall(pool, type, name, body, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Replace the storage volume information or restore from snapshot
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param body Replace the storage volume information or restore from snapshot (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A standard return value response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putStoragePoolsByNameVolumesByTypeNameAsync(String pool, String type, String name, UpdateStoragePoolsByNameVolumesByTypeNameRequest body, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putStoragePoolsByNameVolumesByTypeNameValidateBeforeCall(pool, type, name, body, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putStoragePoolsByNameVolumesByTypeNameSnapshotsName
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param body Volume snapshot information (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snapshot information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putStoragePoolsByNameVolumesByTypeNameSnapshotsNameCall(String pool, String type, String name, UpdateStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequest body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/1.0/storage-pools/{pool}/volumes/{type}/{name}/snapshots/name"
            .replaceAll("\\{" + "pool" + "\\}", localVarApiClient.escapeString(pool.toString()))
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()))
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putStoragePoolsByNameVolumesByTypeNameSnapshotsNameValidateBeforeCall(String pool, String type, String name, UpdateStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequest body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pool' is set
        if (pool == null) {
            throw new ApiException("Missing the required parameter 'pool' when calling putStoragePoolsByNameVolumesByTypeNameSnapshotsName(Async)");
        }
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling putStoragePoolsByNameVolumesByTypeNameSnapshotsName(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling putStoragePoolsByNameVolumesByTypeNameSnapshotsName(Async)");
        }
        

        okhttp3.Call localVarCall = putStoragePoolsByNameVolumesByTypeNameSnapshotsNameCall(pool, type, name, body, _callback);
        return localVarCall;

    }

    /**
     * 
     * Volume snapshot information
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param body Volume snapshot information (optional)
     * @return BackgroundOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snapshot information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public BackgroundOperationResponse putStoragePoolsByNameVolumesByTypeNameSnapshotsName(String pool, String type, String name, UpdateStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequest body) throws ApiException {
        ApiResponse<BackgroundOperationResponse> localVarResp = putStoragePoolsByNameVolumesByTypeNameSnapshotsNameWithHttpInfo(pool, type, name, body);
        return localVarResp.getData();
    }

    /**
     * 
     * Volume snapshot information
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param body Volume snapshot information (optional)
     * @return ApiResponse&lt;BackgroundOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snapshot information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BackgroundOperationResponse> putStoragePoolsByNameVolumesByTypeNameSnapshotsNameWithHttpInfo(String pool, String type, String name, UpdateStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequest body) throws ApiException {
        okhttp3.Call localVarCall = putStoragePoolsByNameVolumesByTypeNameSnapshotsNameValidateBeforeCall(pool, type, name, body, null);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Volume snapshot information
     * @param pool Storage pool name (required)
     * @param type Type of the volume (required)
     * @param name name (required)
     * @param body Volume snapshot information (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Snapshot information </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> A standard error response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> A standard error response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putStoragePoolsByNameVolumesByTypeNameSnapshotsNameAsync(String pool, String type, String name, UpdateStoragePoolsByNameVolumesByTypeNameSnapshotsNameRequest body, final ApiCallback<BackgroundOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = putStoragePoolsByNameVolumesByTypeNameSnapshotsNameValidateBeforeCall(pool, type, name, body, _callback);
        Type localVarReturnType = new TypeToken<BackgroundOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
